const { test, expect } = require("@playwright/test");
const { faker } = require("@faker-js/faker");
const { HomePage } = require("../pages/home-page");
const { ProductPage } = require("../pages/products-page");
const { ProductDetailsPage } = require("../pages/product-details-page");
const { ViewCartPage } = require("../pages/view-cart-page");
const { LoginPage } = require("../pages/login-page");
const { SignUpPage } = require("../pages/sign-up-page");
const { AccountCreatedPage } = require("../pages/account-created-page");
const { CheckoutPage } = require("../pages/checkout-page");
const { PaymentPage } = require("../pages/payment-page");
const { PaymentDonePage } = require("../pages/payment-done-page");

test.describe("Product page", () => {
  let homePage,
    productPage,
    productDetailsPage,
    viewCartPage,
    loginPage,
    signupPage,
    accountCreatedPage,
    checkoutPage,
    paymentPage,
    paymentDonePage;

  // Define constants for the expected URLs.
  const BASE_URL = "https://automationexercise.com";
  const PRODUCTS_URL = `${BASE_URL}/products`;
  const CART_URL = `${BASE_URL}/view_cart`;
  const LOGIN_URL = `${BASE_URL}/login`;
  const SIGNUP_URL = `${BASE_URL}/signup`;
  const ACCOUNT_CREATED_URL = `${BASE_URL}/account_created`;
  const CHECKOUT_URL = `${BASE_URL}/checkout`;
  const PAYMENT_URL = `${BASE_URL}/payment`;

  // Using before each hook to ensure that we navigate to the base URL
  test.beforeEach("1. Navigate to the website", async ({ page }) => {
    // Navigate to Base URL
    await page.goto("/");

    // Initialize Page Objects
    homePage = new HomePage(page);
    productPage = new ProductPage(page);
    productDetailsPage = new ProductDetailsPage(page);
    viewCartPage = new ViewCartPage(page);
    loginPage = new LoginPage(page);
    signupPage = new SignUpPage(page);
    accountCreatedPage = new AccountCreatedPage(page);
    checkoutPage = new CheckoutPage(page);
    paymentPage = new PaymentPage(page);
    paymentDonePage = new PaymentDonePage(page);
  });

  test("should purchase a product with user registration", async ({ page }) => {
    await test.step("2. Go to the Products section", async () => {
      // Navigate to the Products section.
      await homePage.clickProductButton();
      await expect(page).toHaveURL(PRODUCTS_URL);
    });

    await test.step("3. Choose the third product shown in the product list and view its details", async () => {
      // Select the third product from the list of Products.
      await productPage.clickProductByIndex(3);
      await expect(page).toHaveURL(`${BASE_URL}/product_details/3`);
    });

    await test.step("4. Enter a random quantity generated by a function or by a library between 1 to 20", async () => {
      // Select a random quantity between 1 and 20.
      const randomQuantity = faker.number.int({ min: 1, max: 20 });
      await productDetailsPage.fillQuantityInput(randomQuantity);
      expect(await productDetailsPage.getQuantityValue()).toBe(
        `${randomQuantity}`
      );
    });

    await test.step("5. Add the product to the cart.", async () => {
      // Add to cart button and validate the confirmation modal.
      await productDetailsPage.clickAddToCartButton();
      expect(await productDetailsPage.getCartConfirmModalText()).toContain(
        "Your product has been added to cart."
      );

      await productDetailsPage.clickViewCartLink();
      await expect(page).toHaveURL(CART_URL);
    });

    await test.step("6. Proceed to checkout.", async () => {
      // To checkout, an user must be logged in.
      await viewCartPage.clickCheckoutButton();
      expect(await viewCartPage.getCheckoutModalText()).toContain(
        "Register / Login account to proceed on checkout."
      );
      await viewCartPage.clickRegisterLink();
      await expect(page).toHaveURL(LOGIN_URL);
    });

    await test.step("7. Register a new user account using random data (use Faker for name, email, etc.)", async () => {
      // Now register a new user.
      await loginPage.registerNewUser({
        userName: faker.internet.userName(),
        email: faker.internet.email(),
      });
      await expect(page).toHaveURL(SIGNUP_URL);

      // After registration, proceed to enter account information.
      await signupPage.fillPassword(faker.internet.password());
      await signupPage.selectDayOption(faker.number.int({ min: 1, max: 31 }));
      await signupPage.selectMonthOption(faker.date.month());
      await signupPage.selectYearOption(faker.number.int({ min: 1, max: 50 }));

      // Fill Adress information
      await signupPage.signUpNewAccount({
        password: faker.internet.password(),
        day: faker.number.int({ min: 1, max: 31 }),
        month: faker.date.month(),
        yearIndex: faker.number.int({ min: 1, max: 50 }),
        firstName: faker.person.firstName(),
        lastName: faker.person.lastName(),
        address: faker.location.streetAddress(),
        countryIndex: faker.number.int({ min: 1, max: 7 }),
        state: faker.location.state(),
        city: faker.location.city(),
        zip: faker.location.zipCode(),
        mobile: faker.phone.number(),
      });
      await expect(page).toHaveURL(ACCOUNT_CREATED_URL);

      // Wait for the 'account created' page to load.
      expect(await accountCreatedPage.getAccountCreatedTitle()).toContain(
        "ACCOUNT CREATED!"
      );
      await accountCreatedPage.clickContinueButton();
    });

    await test.step("8. Proceed to the cart and confirm the order.", async () => {
      // After registration, weck we are back in the Home Page.
      await expect(page).toHaveURL(BASE_URL);

      // Go to the Cart page and place the order.
      await homePage.clickCartLink();
      await expect(page).toHaveURL(CART_URL);
      await viewCartPage.clickCheckoutButton();
      await expect(page).toHaveURL(CHECKOUT_URL);
      await checkoutPage.clickPlaceOrderLink();
      await expect(page).toHaveURL(PAYMENT_URL);

      // Fill payment information and pay
      await paymentPage.fillPaymentInformationAndPay({
        fullName: faker.person.fullName(),
        cardNumber: faker.finance.creditCardNumber(),
        cardCVC: faker.finance.creditCardCVV(),
        expiryMonth: faker.date.month(),
        expiryYear: faker.date.soon().getFullYear().toString(),
      });

      // Check that the payment was successfully
      expect(await paymentDonePage.getOrderPlacedTitle()).toContain(
        "ORDER PLACED!"
      );
      await paymentDonePage.clickContinueButton();
    });
  });

  // After each test, ensure that the user is logging out.
  test.afterEach("9. Log out of the account.", async ({ page }) => {
    await homePage.clickLogoutLink();
    await expect(page).toHaveURL(LOGIN_URL);
  });
});
